#!/usr/bin/env python
# The line above is important so that this file is interpreted with Python when running it.
# auctioneer, written by Elliot Potter
# Oct 2022, with other code used from last fall


# Import of python modules.
import math  # use of pi.
import tf  # library for transformations
import rospy  # module for ROS APIs
from std_msgs.msg import String
import json
import numpy
from auction.msg import FollowerReq
from auction.srv import RequestFollowers, RequestFollowersResponse
from auction.srv import Bid, BidResponse
from auction.msg._DriveToTargetAction import DriveToTargetAction
from auction.msg._DriveToTargetGoal import DriveToTargetGoal
from auction.simple_motion import SimpleMotion
import actionlib

# topic names
WAYPOINT_TOPIC = "/waypoints"
FOLLOWER_TOPIC = "/subscribe_request"
WINNER_TOPIC = "/winner"
RESOURCE_TOPIC = "/resources"

FOLLOWER_REGISTERY_NAME = "/register_followers"
BID_SERVICE_NAME = "/bid"


class Auctioneer:
    def __init__(self, bot_id):
        self.bot_name = "robot_" + str(bot_id)
        self.waypoint_callback = rospy.Subscriber(WAYPOINT_TOPIC, String, self.waypoint_callback)
        self.follower_requester = rospy.Publisher(FOLLOWER_TOPIC, FollowerReq, queue_size=1)
        self.auction_winners = rospy.Publisher(WINNER_TOPIC, String, queue_size=1)
        self.auction_resources = rospy.Publisher(RESOURCE_TOPIC, String, queue_size=1)
        # Setting up transformation listener.
        self.listener = tf.TransformListener()

        # the array of points that the followers could go to
        self.waypoint_array = []
        self.resource_array = []  # the array of points to bid on
        self.bid_array = []  # the current set of bids for each robot
        self.executing_waypoints = False
        self.executed_waypoints = False
        # the array of follower points
        self.follower_array = []
        self.follower_server = rospy.Service(FOLLOWER_REGISTERY_NAME, RequestFollowers, self.handle_request_followers)
        self.bid_server = rospy.Service(BID_SERVICE_NAME, Bid, self.handle_bid)

        self.ready_for_next_drive = True
        self.is_driving = False

    def waypoint_callback(self, msg):
        """Stores the waypoints"""
        json_string = msg.data
        old_array = self.waypoint_array
        self.waypoint_array = json.loads(json_string)

        # determine if we need to drive bots again
        if len(self.waypoint_array) != len(old_array):
            self.executed_waypoints = False
            return

        for i in range(len(old_array)):
            if old_array[i] != self.waypoint_array[i]:
                self.executed_waypoints = False

        if not self.executed_waypoints or not self.executing_waypoints:
            print("Found waypoints: " + str(self.waypoint_array))

    def send_request_to_followers(self):
        """send request to robot followers for them to sign up"""
        print("Sending follower request")
        req = FollowerReq()
        req.service_name = FOLLOWER_REGISTERY_NAME
        self.follower_requester.publish(req)

    def handle_bid(self, bid_msg):
        """Handles bid_msg for a certain robot"""
        name = bid_msg.robot_name
        bid = json.loads(bid_msg.bid)
        self.bid_array.append({"name": name, "bid": bid})
        print("Received bid from " + name)

        # if all the robots have bid
        if len(self.bid_array) == len(self.resource_array):
            self.next_auction_round()
        return BidResponse(1)

    def handle_request_followers(self, req):
        """Adds follower to the follower array"""
        name = req.robot_name
        print("Received follower service message from robot " + name)
        if name not in self.follower_array:
            self.follower_array.append(name)
        # return success message
        return RequestFollowersResponse(1)

    def next_auction_round(self):
        """Declares the winner of the current auction round, then publishes new resource list"""
        min_cost = 100000000000000        # a big number
        min_cost_robot_name = ""
        min_cost_waypoint = (0, 0)
        min_cost_waypoint_id = -1
        # find the lowest bid
        for bid_group in self.bid_array:
            for waypoint in bid_group["bid"]:
                # (id, coordinates, cost)
                if waypoint[2] < min_cost:
                    min_cost = waypoint[2]
                    min_cost_robot_name = bid_group["name"]
                    min_cost_waypoint = waypoint[1]
                    min_cost_waypoint_id = waypoint[0]

        print(min_cost_robot_name + " won allocation of " + str(min_cost_waypoint))
        winner_msg = String(json.dumps([min_cost_robot_name, min_cost_waypoint]))
        self.auction_winners.publish(winner_msg)

        # remove this waypoint from the list
        new_resources = []
        for waypoint in self.resource_array:
            if waypoint[0] != min_cost_waypoint_id:
                new_resources.append(waypoint)

        # set the new resource array
        self.resource_array = new_resources
        self.bid_array = []
        if len(self.resource_array) == 0:
            self.executing_waypoints = False
            self.executed_waypoints = True
            print("FINISHED AUCTION OF POINTS")
        # otherwise send out a new auction
        else:
            strmsg = String(json.dumps(self.resource_array))
            self.auction_resources.publish(strmsg)

    def allocate_goals_robots(self):
        """
        Waits until goals have been received, and number of goals equals number of robots
        Then greedily assigns robots to goals
        """
        # wait until we have waypoints and enough robots to cover them, and have not driven to these waypoints yet
        while (len(self.waypoint_array) == 0 or
               len(self.follower_array) != len(self.waypoint_array) or
               self.executed_waypoints or self.executing_waypoints
        ):
            print(len(self.waypoint_array))
            print(len(self.follower_array))
            print(self.ready_for_next_drive)
            rospy.sleep(1)

        print("Beginning Auction Procedure")
        self.bid_array = []
        self.executing_waypoints = True
        self.resource_array = []
        i = 0
        # copy the waypoint array into the resource array
        for waypoint in self.waypoint_array:
            self.resource_array.append((i, waypoint))
            i += 1
        # publish the resource array so that robots can bid on it
        strmsg = String(json.dumps(self.resource_array))
        self.auction_resources.publish(strmsg)


if __name__ == "__main__":
    rospy.init_node('auctioneer')
    robot_index = rospy.get_param("robot_index")
    leader = Auctioneer(robot_index)

    rospy.sleep(2)
    leader.send_request_to_followers()

    # loop, allocating goals to robots
    while not rospy.is_shutdown():
        leader.allocate_goals_robots()
        rospy.sleep(2)
