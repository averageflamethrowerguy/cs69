#!/usr/bin/env python
# The line above is important so that this file is interpreted with Python when running it.
# Flocker written by Elliot Potter
# Sep 21, 2022, with other code used from last fall

# Import of python modules.
import math  # use of pi.
import tf  # library for transformations.

# import of relevant libraries.
import rospy  # module for ROS APIs
from nav_msgs.msg import Odometry  # message type for odometry
from std_msgs.msg import Float32
from geometry_msgs.msg import Twist  # message type for cmd_vel
from sensor_msgs.msg import LaserScan  # message type for scan
from flocking.boid import get_goal_orientation, constrain_angle
from flocking.wall_avoider_2 import get_force_vec

# define a constant speed for the robot to travel at
ROBOT_VELOCITY = 0.5
ROBOT_ROTATION_MULTIPLIER = 1.3
FREQUENCY = 10  # Hz.
WALL_AVOID_RANGE = 2  # the range at which to start worrying about walls
WALL_SAFETY_ANGLE = math.pi / 4

class Flocker:
    def __init__(self, robot_index, robot_count, is_stage):
        """Initialize the module"""
        self.stopped = False
        self.robot_index = robot_index
        self.robot_count = robot_count

        # initialize an array of flock positions
        # x, y, rz
        self.flock_positions = []
        for i in range(robot_count):
            self.flock_positions.append((0.0, 0.0, 0.0))

        self.laser_force_vec = [0., 0.]

        # initialize odometry subscriber
        self.odom_subscriber = rospy.Subscriber("odom", Odometry, self.odometry_callback)

        # create subscribers to all odom topics
        self.flock_pos_subs = []
        for i in range(self.robot_count):
            if i == robot_index:
                continue
            self.flock_pos_subs.append(rospy.Subscriber("/robot_" + str(i) + "/odom",
                                                        Odometry,
                                                        self.flock_pos_callback
                                                        ))

        self._cmd_pub = rospy.Publisher("cmd_vel", Twist, queue_size=1)
        if is_stage == "1" or is_stage == 1:
            self._laser_sub = rospy.Subscriber("/robot_" + str(robot_index) + "/base_scan",
                                               LaserScan,
                                               self._laser_callback,
                                               queue_size=1
                                               )
        else:
            self._laser_sub = rospy.Subscriber("/robot_" + str(robot_index) + "/scan",
                                               LaserScan,
                                               self._laser_callback,
                                               queue_size=1
                                               )

        # initialize the current and goal orientations, positions
        self.current_position = (0.0, 0.0)
        self.current_orientation = 0.0
        self.goal_orientation = 0.0

        # define allowable direction range that prevents boid from hitting wall
        self.orientation_range = (-math.pi, math.pi)

    def odometry_callback(self, odom_message):
        """Updates class variables with information about the robot state"""
        pose = odom_message.pose.pose
        self.current_position = (pose.position.x, pose.position.y)
        self.current_orientation = tf.transformations.euler_from_quaternion([pose.orientation.x, pose.orientation.y,
                                                                             pose.orientation.z, pose.orientation.w])[2]
        self.flock_positions[self.robot_index] = (pose.position.x, pose.position.y, self.current_orientation)
        # manipulate the message so it's obvious who it comes from, then resend it
        odom_message.child_frame_id = str(self.robot_index)
        self.update_goals()

    @staticmethod
    def find_closest_angle(goal, option1, option2):
        """All three angles are between -pi and pi"""
        dist1 = math.fabs(constrain_angle(goal - option1))
        dist2 = math.fabs(constrain_angle(goal - option2))
        if dist2 > dist1:
            return option1
        else:
            return option2

    def flock_pos_callback(self, odom_message):
        """Updates the position of the member of the flock in the array"""
        index = int(odom_message.header.frame_id.replace("robot_", "").replace("/odom", "").replace("/", ""))
        # if we intercept our own message, return early
        if index == self.robot_index:
            print(index, self.robot_index)
            return

        pose = odom_message.pose.pose

        current_orientation = tf.transformations.euler_from_quaternion([pose.orientation.x, pose.orientation.y,
                                                                        pose.orientation.z, pose.orientation.w])[2]

        # otherwise, update the array with the x,y,rz triple
        self.flock_positions[index] = (pose.position.x, pose.position.y, current_orientation)

    def _laser_callback(self, laser_message):
        self.laser_force_vec = get_force_vec(laser_message, self.current_orientation)

    def update_goals(self):
        """Given an initialized robot position and array of other robots, figure out where the robot should travel"""
        # get the desired orientation from the boid function
        self.goal_orientation = get_goal_orientation(self.flock_positions, self.robot_index, self.laser_force_vec)

    def drive(self):
        """Driving loop which moves the robot toward the goal orientation while going forward"""
        rate = rospy.Rate(FREQUENCY)
        while not self.stopped:
            twist_msg = Twist()
            twist_msg.linear.x = ROBOT_VELOCITY
            twist_msg.angular.z = (self.goal_orientation - self.current_orientation) * ROBOT_ROTATION_MULTIPLIER
            self._cmd_pub.publish(twist_msg)
            rate.sleep()

    def stop(self):
        """Stop the robot"""
        self.stopped = True


def main():
    """Main function."""
    # 1st. initialization of node.
    # TODO -- naming of node based on args
    rospy.init_node("flocker")

    # Sleep for a few seconds to wait for the registration.
    rospy.sleep(2)

    robot_count = rospy.get_param("robot_count")
    robot_index = rospy.get_param("robot_index")
    is_stage = rospy.get_param("/is_stage")

    # Initialization of the class for the shapes
    flocker = Flocker(robot_index, robot_count, is_stage)

    # If interrupted, send a stop command.
    rospy.on_shutdown(flocker.stop)

    print("Starting to drive the robot")
    # run the program
    flocker.drive()


if __name__ == "__main__":
    """Run the main function."""
    main()
