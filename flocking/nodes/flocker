#!/usr/bin/env python
# The line above is important so that this file is interpreted with Python when running it.
# Flocker written by Elliot Potter
# Sep 21, 2022, with other code used from last fall

# Import of python modules.
import math  # use of pi.
import tf  # library for transformations.

# import of relevant libraries.
import rospy  # module for ROS APIs
from nav_msgs.msg import Odometry  # message type for odometry
from std_msgs.msg import Float32
from geometry_msgs.msg import Twist  # message type for cmd_vel
from sensor_msgs.msg import LaserScan  # message type for scan
from flocking.boid import get_goal_orientation, constrain_angle
from flocking.wall_avoider import get_safe_range

# define a constant speed for the robot to travel at
ROBOT_VELOCITY = 0.5
ROBOT_ROTATION_MULTIPLIER = 1.3
FREQUENCY = 10  # Hz.
WALL_AVOID_RANGE = 2  # the range at which to start worrying about walls
WALL_SAFETY_ANGLE = math.pi / 4

class Flocker:
    def __init__(self, robot_index, robot_count):
        """Initialize the module"""
        self.stopped = False
        self.robot_index = robot_index
        self.robot_count = robot_count

        # initialize an array of flock positions
        # x, y, rz
        self.flock_positions = []
        for i in range(robot_count):
            self.flock_positions.append((0.0, 0.0, 0.0))

        # initialize odometry subscriber
        self.odom_subscriber = rospy.Subscriber("odom", Odometry, self.odometry_callback)
        # create a publisher to publish our own bot position
        #self.odom_publisher = rospy.Publisher("flock_positions", Odometry, queue_size=1)

        # create subscribers to all odom topics
        self.flock_pos_subs = []
        for i in range(self.robot_count):
            if i == robot_index:
                continue
            self.flock_pos_subs.append(rospy.Subscriber("/robot_" + str(i) + "/odom",
                                                        Odometry,
                                                        self.flock_pos_callback
                                                        ))

        self._cmd_pub = rospy.Publisher("cmd_vel", Twist, queue_size=1)
        self._laser_sub = rospy.Subscriber("/robot_" + str(robot_index) + "/scan",
                                           LaserScan,
                                           self._laser_callback,
                                           queue_size=1
                                           )

        # create a subscriber to listen to other bot positions
        #self.flock_pos_subscriber = rospy.Subscriber("flock_positions", Odometry, self.flock_pos_callback)

        # initialize the current and goal orientations, positions
        self.current_position = (0.0, 0.0)
        self.current_orientation = 0.0
        self.goal_orientation = 0.0

        # define allowable direction range that prevents boid from hitting wall
        self.orientation_range = (-math.pi, math.pi)

    def odometry_callback(self, odom_message):
        """Updates class variables with information about the robot state"""
        pose = odom_message.pose.pose
        self.current_position = (pose.position.x, pose.position.y)
        self.current_orientation = tf.transformations.euler_from_quaternion([pose.orientation.x, pose.orientation.y,
                                                                             pose.orientation.z, pose.orientation.w])[2]
        self.flock_positions[self.robot_index] = (pose.position.x, pose.position.y, self.current_orientation)
        # manipulate the message so it's obvious who it comes from, then resend it
        odom_message.child_frame_id = str(self.robot_index)
        self.update_goals()

    @staticmethod
    def find_closest_angle(goal, option1, option2):
        """All three angles are between -pi and pi"""
        dist1 = math.fabs(constrain_angle(goal - option1))
        dist2 = math.fabs(constrain_angle(goal - option2))
        if dist2 > dist1:
            return option1
        else:
            return option2

    def flock_pos_callback(self, odom_message):
        """Updates the position of the member of the flock in the array"""
        index = int(odom_message.child_frame_id.replace("robot_", "").replace("/base_footprint", ""))
        # if we intercept our own message, return early
        if index == self.robot_index:
            print(index, self.robot_index)
            return

        pose = odom_message.pose.pose

        current_orientation = tf.transformations.euler_from_quaternion([pose.orientation.x, pose.orientation.y,
                                                                        pose.orientation.z, pose.orientation.w])[2]

        # otherwise, update the array with the x,y,rz triple
        self.flock_positions[index] = (pose.position.x, pose.position.y, current_orientation)

    def _laser_callback(self, laser_message):
        """
        Worries about where the walls are
        The laser gets distances to walls in the laser frame of reference (NOT necessarily the robot...)
        These need to be rotated by the robot frame to get the goal range
        """
        # # retrieves these in 0-2pi
        # orientation_range = get_safe_range(laser_message)
        # constrained_orientation_range = (constrain_angle(orientation_range[0]), constrain_angle(orientation_range[1]))
        # # correct an odd bug when there are no obstacles
        # if constrained_orientation_range == (0., 0.):
        #     self.orientation_range = (-math.pi, math.pi)
        #     return
        # # convert rotation angles
        # orientation_range = (constrain_angle(constrained_orientation_range[0] + self.current_orientation),
        #                      constrain_angle(constrained_orientation_range[1] + self.current_orientation)
        #                      )
        # # narrow the range by 15 deg on a side
        # if orientation_range[1] > orientation_range[0]:
        #     self.orientation_range = (min(orientation_range[1], orientation_range[0] + WALL_SAFETY_ANGLE),
        #                               max(orientation_range[0], orientation_range[1] - WALL_SAFETY_ANGLE))
        # else:
        #     # make the range on the back side of 0 and 1 larger
        #     self.orientation_range = (constrain_angle(max(orientation_range[1],
        #                                                   orientation_range[0] + WALL_SAFETY_ANGLE)),
        #                               constrain_angle(min(orientation_range[0],
        #                                                   orientation_range[1] - WALL_SAFETY_ANGLE))
        #                               )

    def update_goals(self):
        """Given an initialized robot position and array of other robots, figure out where the robot should travel"""
        # get the desired orientation from the boid function
        goal_orientation = get_goal_orientation(self.flock_positions, self.robot_index)

        print("Goal Orientation Pre Clip: " + str(goal_orientation))
        # print("Orientation Range: " + str(self.orientation_range))

        # Handle two cases of angle -- safe orientation doesn't straddle pi, and it does
        # safe orientation doesn't straddle pi
        if self.orientation_range[0] < self.orientation_range[1]:
            # if goal orientation is not in this range
            if self.orientation_range[0] > goal_orientation or goal_orientation > self.orientation_range[1]:
                # calculate the shorter orientation distance
                goal_orientation = self.find_closest_angle(
                    goal_orientation,
                    self.orientation_range[0],
                    self.orientation_range[1]
                )

        # safe orientation straddles pi
        else:
            # if goal orientation is between the two numbers
            if self.orientation_range[1] < goal_orientation < self.orientation_range[0]:
                # calculate the shorter orientation distance
                goal_orientation = self.find_closest_angle(
                    goal_orientation,
                    self.orientation_range[0],
                    self.orientation_range[1]
                )

        print("Goal Orientation Post Clip: " + str(goal_orientation))
        print("Current Orientation: " + str(self.current_orientation))

        # update the instance variables
        self.goal_orientation = goal_orientation

    def drive(self):
        """Driving loop which moves the robot toward the goal orientation while going forward"""
        rate = rospy.Rate(FREQUENCY)
        while not self.stopped:
            twist_msg = Twist()
            twist_msg.linear.x = ROBOT_VELOCITY
            twist_msg.angular.z = (self.goal_orientation - self.current_orientation) * ROBOT_ROTATION_MULTIPLIER
            self._cmd_pub.publish(twist_msg)
            rate.sleep()

    def stop(self):
        """Stop the robot"""
        self.stopped = True


def main():
    """Main function."""
    # 1st. initialization of node.
    # TODO -- naming of node based on args
    rospy.init_node("flocker")

    # Sleep for a few seconds to wait for the registration.
    rospy.sleep(2)

    robot_count = rospy.get_param("robot_count")
    robot_index = rospy.get_param("robot_index")

    # Initialization of the class for the shapes
    flocker = Flocker(robot_index, robot_count)

    # If interrupted, send a stop command.
    rospy.on_shutdown(flocker.stop)

    # run the program
    flocker.drive()


if __name__ == "__main__":
    """Run the main function."""
    main()
