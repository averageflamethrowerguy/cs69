#!/usr/bin/env python
# The line above is important so that this file is interpreted with Python when running it.
# tf_broadcaster, written by Elliot Potter
# Oct 2022, with other code used from last fall

# Import of python modules.
import math  # use of pi.
import tf  # library for transformations.

# import of relevant libraries.
import rospy  # module for ROS APIs
from std_msgs.msg import Float32
from geometry_msgs.msg import PoseWithCovarianceStamped
import tf

FREQUENCY = 10  # freq for publishing transforms


if __name__ == '__main__':
    rospy.init_node('initialpose_node')
    x = rospy.get_param("x")
    y = rospy.get_param("y")
    orientation = rospy.get_param("orientation")
    robot_num = rospy.get_param("robot_index")

    pub = rospy.Publisher("/initialpose", PoseWithCovarianceStamped)
    msg = PoseWithCovarianceStamped()
    msg.header.frame_id = robot_num
    msg.pose.pose.position.x = x
    msg.pose.pose.position.y = y
    msg.pose.pose.position.z = 0

    quaternion = tf.transformations.quaternion_from_euler((0, 0, orientation))
    msg.pose.pose.orientation.x = quaternion[0]
    msg.pose.pose.orientation.y = quaternion[1]
    msg.pose.pose.orientation.z = quaternion[2]
    msg.pose.pose.orientation.w = quaternion[3]

    rate = rospy.Rate(FREQUENCY)
    while not rospy.is_shutdown():
        pub.publish(quaternion)
        rate.sleep()
