#!/usr/bin/env python
# The line above is important so that this file is interpreted with Python when running it.
# robot_leader, written by Elliot Potter
# Oct 2022, with other code used from last fall

# Import of python modules.
import math  # use of pi.
import tf  # library for transformations
import rospy  # module for ROS APIs
from std_msgs.msg import String
import json
import numpy
from leader_follower.msg import FollowerReq
from leader_follower.srv import RequestFollowers, RequestFollowersResponse

REGISTERY_NAME = "register_followers"


class RobotLeader:
    def __init__(self, bot_id):
        self.bot_name = "robot_" + bot_id
        self.waypoint_callback = rospy.Subscriber("/waypoints", String, self.waypoint_callback)
        self.follower_requester = rospy.Publisher("/subscribe_request", FollowerReq, queue_size=1)
        # Setting up transformation listener.
        self.listener = tf.TransformListener()

        # the array of points that the followers could go to
        self.waypoint_array = []
        # the array of follower points
        self.follower_array = []
        self.server = rospy.Service(REGISTERY_NAME, RequestFollowers, self.handle_request_followers)

    def waypoint_callback(self, msg):
        """Stores the waypoints"""
        json_string = msg.data
        self.waypoint_array = json.loads(json_string)

    def send_request_to_followers(self):
        """send request to robot followers for them to sign up"""
        req = FollowerReq()
        req.service_name = REGISTERY_NAME
        self.follower_requester.publish(req)

    def handle_request_followers(self, req):
        """Adds follower to the follower array"""
        name = req.robot_name
        if name not in self.follower_array:
            self.follower_array.append(name)

    def allocate_goals_robots(self):
        """
        Waits until goals have been received, and number of goals equals number of robots
        Then greedily assigns robots to goals
        """
        while len(self.waypoint_array) == 0 or len(self.follower_array) != len(self.waypoint_array):
            rospy.sleep(1)

        # loop over waypoints, pairing them with the closest robot
        used_robots = []
        waypoint_robot_pairs = []
        for point in self.waypoint_array:
            min_distance = math.inf
            min_distance_bot = ""
            min_distance_point = (0, 0)
            for bot in [*self.follower_array, self.bot_name]:
                if bot in used_robots:
                    continue

                # convert the point into bot coords
                (trans, rot) = self.listener.lookupTransform('world', bot + '/base_link', rospy.Time(0))
                t = tf.transformations.translation_matrix(trans)
                R = tf.transformations.quaternion_matrix(rot)

                world_T_baselink = t.dot(R)
                target_np = world_T_baselink.dot(
                    numpy.array([point[0], point[1], 0, 1])
                )

                # convert 0,0 into bot coords
                robot_np = world_T_baselink.dot(
                    numpy.array([point[0], point[1], 0, 1])
                )

                # calculate distance between the two
                distance = math.sqrt(math.pow(target_np[0]-robot_np[0], 2) + math.pow(target_np[1]-robot_np[1], 2))

                # evaluate if this bot is closer than previous closest
                if distance < min_distance:
                    min_distance = distance
                    min_distance_bot = bot
                    min_distance_point = (target_np[0], target_np[1])

            waypoint_robot_pairs.append((min_distance_bot, min_distance_point))
            used_robots.append(min_distance_bot)

        # TODO -- action client to assign goals to followers
        # TODO -- trigger the leader to drive to the point


if __name__ == "__main__":
    rospy.init_node('robot_leader')
    robot_index = rospy.get_param("robot_index")
    leader = RobotLeader(robot_index)
    rospy.sleep(2)
    leader.send_request_to_followers()
    leader.allocate_goals_robots()

